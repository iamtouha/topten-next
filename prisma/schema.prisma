generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          USER_ROLE @default(USER)
  profileId     String?   @unique
  createdAt     DateTime  @default(now())
  active        Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  profile       Profile?  @relation(fields: [profileId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id          String   @id @default(cuid())
  fullName    String
  designation String
  phone       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?
  roles       Role[]
}

model Store {
  id        String     @id @default(cuid())
  name      String
  address   String
  type      STORE_TYPE
  roles     Role[]
  stocks    Stock[]
  restocks  Restock[]
  customers Customer[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt 
  createdBy   String?
  updatedBy   String?
}

enum STORE_TYPE {
  INVENTORY
  DISTRIBUTION
}

model Role {
  storeId   String
  profileId String
  addedAt   DateTime @default(now())
  addedBy   String?
  updatedAt DateTime @updatedAt
  updatedBy String?
  post      POST
  store     Store    @relation(fields: [storeId], references: [id])
  profile   Profile  @relation(fields: [profileId], references: [id])

  @@id([storeId, profileId])
  @@index([storeId])
  @@index([profileId])
}

model Product {
  id           String        @id @default(cuid())
  name         String
  size         String
  price        Float
  updatedAt    DateTime      @updatedAt
  updatedBy    String?
  createdAt    DateTime      @default(now())
  createdBy    String?
  published    Boolean
  stocks       Stock[]
  restockItems RestockItem[]
  orderItems   OrderItem[]
}

model Stock {
  productId String
  storeId   String
  quantity  Int
  addedAt   DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  store     Store    @relation(fields: [storeId], references: [id])

  @@id([productId, storeId])
  @@index([productId])
  @@index([storeId])
}

model Restock {
  id        String        @id @default(cuid())
  storeId   String
  quantity  Int
  addedAt   DateTime      @default(now())
  addedBy   String?
  updatedAt DateTime      @updatedAt
  updatedBy String?
  store     Store         @relation(fields: [storeId], references: [id])
  items     RestockItem[]

  @@index([storeId])
}

model RestockItem {
  productId String
  restockId String
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  restock   Restock @relation(fields: [restockId], references: [id])

  @@id([productId, restockId])
  @@index([productId])
  @@index([restockId])
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  address   String
  phone     String
  storeId   String
  addedAt   DateTime @default(now())
  addedBy   String?
  updatedAt DateTime @updatedAt
  updatedBy String?
  store     Store    @relation(fields: [storeId], references: [id])
  orders    Order[]

  @@index([storeId])
}

model Order {
  id         String      @id @default(cuid())
  customerId String
  total      Float
  approved   Boolean     @default(false)
  createdAt  DateTime    @default(now())
  createdBy  String?
  updatedAt  DateTime    @updatedAt
  updatedBy  String?
  customer   Customer    @relation(fields: [customerId], references: [id])
  items      OrderItem[]

  @@index([customerId])
}

model OrderItem {
  productId String
  orderId   String
  quantity  Int
  price     Float
  product   Product @relation(fields: [productId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id])

  @@id([productId, orderId])
  @@index([productId])
  @@index([orderId])
}

enum USER_ROLE {
  SUPER_ADMIN
  ADMIN
  USER
}

enum POST {
  DIRECTOR
  MANAGER
  OFFICER
}
