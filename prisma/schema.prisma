  
generator client {
  provider = "prisma-client-js"
}

datasource db {
    provider          = "mysql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
    relationMode      = "prisma" 
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?    @db.Text
  access_token      String?    @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?    @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          USER_ROLE @default(USER)
  profile       Profile?  @relation(fields: [profileId], references: [id])  
  profileId     String?   @unique
  createdAt     DateTime @default(now())
}
enum USER_ROLE {
  SUPER_ADMIN
  ADMIN
  USER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id          String  @id @default(cuid())
  user        User?
  fullName    String
  designation String
  phone       String
  roles       Role[]
  approved    Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Store {
  id          String  @id @default(cuid())
  name        String
  address     String
  roles       Role[]
  customers   Customer[]
  stocks      Stock[]
  restocks    Restock[] 
}

model Role {
  store       Store @relation(fields: [storeId], references: [id]) 
  storeId     String
  profile     Profile @relation(fields: [profileId], references: [id])
  profileId   String
  addedAt     DateTime @default(now())
  addedBy     String?
  updatedAt   DateTime @updatedAt
  updatedBy   String?
  post        POST

  @@id([storeId, profileId])
  @@index([storeId])
  @@index([profileId])
}

enum POST {
  DIRECTOR
  MANAGER
  OFFICER
}

model Product {
  id          String  @id @default(cuid())
  name        String
  size        String
  price       Float  
  addedAt     DateTime @default(now())
  addedBy     String?
  updatedAt   DateTime @updatedAt
  updatedBy   String?
  stocks      Stock[]
  orderItems  OrderItem[]
  restockItems RestockItem[]
}

model Stock { 
  product     Product @relation(fields: [productId], references: [id])
  productId   String
  store       Store @relation(fields: [storeId], references: [id])
  storeId     String
  quantity    Int
  addedAt     DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@id([productId, storeId])
  @@index([productId])
  @@index([storeId])
}

model Restock {
  id          String  @id @default(cuid())
  store       Store @relation(fields: [storeId], references: [id])
  storeId     String
  quantity    Int
  addedAt     DateTime @default(now())
  addedBy     String?
  updatedAt   DateTime @updatedAt
  updatedBy   String?
  items       RestockItem[]

  @@index([storeId])
}

model RestockItem {
  product     Product @relation(fields: [productId], references: [id])
  productId   String
  restock     Restock @relation(fields: [restockId], references: [id])
  restockId   String
  quantity    Int

  @@id([productId, restockId])
  @@index([productId])
  @@index([restockId])
}

model Customer {
  id          String  @id @default(cuid())
  name        String
  address     String
  phone       String
  store       Store @relation(fields: [storeId], references: [id])
  storeId     String
  orders      Order[]
  addedAt     DateTime @default(now())
  addedBy     String?
  updatedAt   DateTime @updatedAt
  updatedBy   String?

  @@index([storeId])
}

model Order {
  id          String  @id @default(cuid())
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  String
  items       OrderItem[]
  total       Float
  approved    Boolean @default(false)
  createdAt   DateTime @default(now())
  createdBy   String?
  updatedAt   DateTime @updatedAt
  updatedBy   String?

  @@index([customerId])
}

model OrderItem { 
  product     Product @relation(fields: [productId], references: [id])
  productId   String
  order       Order @relation(fields: [orderId], references: [id])
  orderId     String 
  quantity    Int
  price       Float

  @@id([productId, orderId])
  @@index([productId])
  @@index([orderId])
}


 